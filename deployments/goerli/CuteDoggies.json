{
  "address": "0x0bCe69f69931E6b710440e99e1Ee5cE1367ec48c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "mintFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CuteDoggies__IncorrectAmountValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CuteDoggies__LowLevelCallFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintFee",
          "type": "uint256"
        }
      ],
      "name": "CuteDoggies__NeedMoreETHSent",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "receivedValue",
          "type": "uint256"
        }
      ],
      "name": "CuteDoggies__RangeOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CuteDoggies__TokenDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CuteDoggies__TransferToTheZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum CuteDoggies.Breed",
          "name": "dogBreed",
          "type": "uint8"
        }
      ],
      "name": "NFTMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "NFTRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCallBackGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChanceArray",
      "outputs": [
        {
          "internalType": "uint256[3]",
          "name": "",
          "type": "uint256[3]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGasLane",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxChanceValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMintFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "getRequestIdToSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSubId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenBreed",
      "outputs": [
        {
          "internalType": "enum CuteDoggies.Breed",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVrfCoordinatorV2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestNFT",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3ef343113cae2b8c89413dec737f6a5cd3fffa062a8f23d0f7ee189b4194ee26",
  "receipt": {
    "to": null,
    "from": "0x89019a2235ecc23D5962D657B576301d7037aEc9",
    "contractAddress": "0x0bCe69f69931E6b710440e99e1Ee5cE1367ec48c",
    "transactionIndex": 86,
    "gasUsed": "3354455",
    "logsBloom": "0x
    "blockHash": "0x336e120d4432c1768d0f05a4a12f358d89e10120de082b8dbcf6bf7ccac65113",
    "transactionHash": "0x3ef343113cae2b8c89413dec737f6a5cd3fffa062a8f23d0f7ee189b4194ee26",
    "logs": [
      {
        "transactionIndex": 86,
        "blockNumber": 7589106,
        "transactionHash": "0x3ef343113cae2b8c89413dec737f6a5cd3fffa062a8f23d0f7ee189b4194ee26",
        "address": "0x0bCe69f69931E6b710440e99e1Ee5cE1367ec48c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000089019a2235ecc23d5962d657b576301d7037aec9"
        ],
        "data": "0x",
        "logIndex": 232,
        "blockHash": "0x336e120d4432c1768d0f05a4a12f358d89e10120de082b8dbcf6bf7ccac65113"
      }
    ],
    "blockNumber": 7589106,
    "cumulativeGasUsed": "22567413",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D",
    "771",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "500000",
    "100000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "e5b43ac788a32cf4d72644da97074d89",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CuteDoggies__IncorrectAmountValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CuteDoggies__LowLevelCallFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"}],\"name\":\"CuteDoggies__NeedMoreETHSent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivedValue\",\"type\":\"uint256\"}],\"name\":\"CuteDoggies__RangeOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CuteDoggies__TokenDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CuteDoggies__TransferToTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum CuteDoggies.Breed\",\"name\":\"dogBreed\",\"type\":\"uint8\"}],\"name\":\"NFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"NFTRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCallBackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChanceArray\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasLane\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxChanceValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"getRequestIdToSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenBreed\",\"outputs\":[{\"internalType\":\"enum CuteDoggies.Breed\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVrfCoordinatorV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CuteDoggies.sol\":\"CuteDoggies\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/CuteDoggies.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nerror CuteDoggies__TokenDoesNotExist();\\nerror CuteDoggies__LowLevelCallFailed();\\nerror CuteDoggies__IncorrectAmountValue();\\nerror CuteDoggies__TransferToTheZeroAddress();\\nerror CuteDoggies__RangeOutOfBounds(uint256 maxValue, uint256 receivedValue);\\nerror CuteDoggies__NeedMoreETHSent(uint256 sent, uint256 mintFee);\\n\\ncontract CuteDoggies is VRFConsumerBaseV2, ERC721, Ownable {\\n\\t/* Type declaration */\\n\\tenum Breed {\\n\\t\\tPUG,\\n\\t\\tSHIBA_INU,\\n\\t\\tST_BERNARD\\n\\t}\\n\\n\\t/* VRF state variables */\\n\\tVRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n\\tuint32 private immutable i_callbackGasLimit;\\n\\tuint64 private immutable i_subId;\\n\\tbytes32 private immutable i_gasLane;\\n\\tuint16 private constant REQUEST_CONFIRMATIONS = 3;\\n\\tuint32 private constant NUM_WORDS = 1;\\n\\n\\t/* VRF helper */\\n\\tmapping(uint256 => address) private s_requestIdToSender;\\n\\n\\t// Main variables\\n\\tuint256 private constant MAX_CHANCE_VALUE = 100;\\n\\tuint256 private immutable i_mintFee;\\n\\n\\tuint256 private s_tokenCounter;\\n\\tmapping(uint256 => Breed) private s_tokenIdToBreed;\\n\\n\\tevent NFTRequested(address indexed sender, uint256 requestId);\\n\\tevent NFTMinted(address indexed sender, uint256 requestId, Breed dogBreed);\\n\\tevent FundsWithdrawn(address indexed to, uint256 amount);\\n\\n\\t/* Functions */\\n\\tconstructor(\\n\\t\\taddress vrfCoordinatorV2,\\n\\t\\tuint64 subId,\\n\\t\\tbytes32 gasLane,\\n\\t\\tuint32 callbackGasLimit,\\n\\t\\tuint256 mintFee\\n\\t) VRFConsumerBaseV2(vrfCoordinatorV2) ERC721(\\\"Cute Doggies\\\", \\\"CDoggies\\\") {\\n\\t\\ti_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n\\t\\ti_subId = subId;\\n\\t\\ti_gasLane = gasLane;\\n\\t\\ti_callbackGasLimit = callbackGasLimit;\\n\\t\\ti_mintFee = mintFee;\\n\\t}\\n\\n\\t/* See _requestNFT function */\\n\\tfunction requestNFT() external payable {\\n\\t\\t_requestNFT();\\n\\t}\\n\\n\\t/* VRF Coordinator V2 will answer to the user request and mint random NFT */\\n\\tfunction fulfillRandomWords(uint256 requestId, uint256[] memory randomWords)\\n\\t\\tinternal\\n\\t\\toverride\\n\\t{\\n\\t\\t/* Get address which request NFT */\\n\\t\\taddress tokenOwner = s_requestIdToSender[requestId];\\n\\t\\tdelete s_requestIdToSender[requestId];\\n\\n\\t\\t/* Mint token for requestOwner */\\n\\t\\tuint256 newTokenId = ++s_tokenCounter;\\n\\t\\t_safeMint(tokenOwner, newTokenId);\\n\\n\\t\\t/* Calculate modedRng (which presents a uint256 from 0 to 99) */\\n\\t\\tuint256 modedRng = randomWords[0] % MAX_CHANCE_VALUE;\\n\\n\\t\\t/* Get breed for current token and store it! */\\n\\t\\tBreed currentDogBreed = getBreedFromModedRng(modedRng);\\n\\t\\ts_tokenIdToBreed[newTokenId] = currentDogBreed;\\n\\n\\t\\temit NFTMinted(tokenOwner, requestId, currentDogBreed);\\n\\t}\\n\\n\\tfunction withdraw(address payable to, uint256 amount) external onlyOwner {\\n\\t\\tif (to == address(0)) revert CuteDoggies__TransferToTheZeroAddress();\\n\\t\\tif (amount == 0 || amount > address(this).balance)\\n\\t\\t\\trevert CuteDoggies__IncorrectAmountValue();\\n\\n\\t\\t(bool isSuccess, ) = to.call{value: amount}(\\\"\\\");\\n\\t\\tif (!isSuccess) revert CuteDoggies__LowLevelCallFailed();\\n\\t\\temit FundsWithdrawn(to, amount);\\n\\t}\\n\\n\\t/* See _requestNFT function */\\n\\treceive() external payable {\\n\\t\\t_requestNFT();\\n\\t}\\n\\n\\t/* Get breed for random NFT */\\n\\tfunction getBreedFromModedRng(uint256 modedRng)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (Breed)\\n\\t{\\n\\t\\tuint256 cumulativeSum;\\n\\n\\t\\t/* 10, 30, 100*/\\n\\t\\tuint256[3] memory chanceArray = getChanceArray();\\n\\n\\t\\tfor (uint256 i; i < chanceArray.length; i++) {\\n\\t\\t\\t/* \\n            For example modedRng = 25:\\n                ((25 >= 0) and (25 < 10)) => false => cumulativeSum = cumulativeSum + 10;\\n                ((25 >= 10) and (25 < 40)) => return SHIBA_INU;\\n            */\\n\\t\\t\\tif (\\n\\t\\t\\t\\tmodedRng >= cumulativeSum &&\\n\\t\\t\\t\\tmodedRng < cumulativeSum + chanceArray[i]\\n\\t\\t\\t) return Breed(i);\\n\\n\\t\\t\\tcumulativeSum = cumulativeSum + chanceArray[i];\\n\\t\\t}\\n\\n\\t\\trevert CuteDoggies__RangeOutOfBounds(MAX_CHANCE_VALUE, modedRng);\\n\\t}\\n\\n\\t/* Request a random word and create CuteDoggie NFT for sender */\\n\\tfunction _requestNFT() private {\\n\\t\\tif (msg.value < i_mintFee)\\n\\t\\t\\trevert CuteDoggies__NeedMoreETHSent(msg.value, i_mintFee);\\n\\n\\t\\tuint256 requestId = i_vrfCoordinator.requestRandomWords(\\n\\t\\t\\ti_gasLane,\\n\\t\\t\\ti_subId,\\n\\t\\t\\tREQUEST_CONFIRMATIONS,\\n\\t\\t\\ti_callbackGasLimit,\\n\\t\\t\\tNUM_WORDS\\n\\t\\t);\\n\\n\\t\\ts_requestIdToSender[requestId] = msg.sender;\\n\\t\\temit NFTRequested(msg.sender, requestId);\\n\\t}\\n\\n\\t/* Getters */\\n\\tfunction tokenURI(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (string memory)\\n\\t{\\n\\t\\tif (!_exists(tokenId)) revert CuteDoggies__TokenDoesNotExist();\\n\\n\\t\\tstring memory base = _baseURI();\\n\\t\\tstring memory tokenUri = getDoggiesUri(tokenId);\\n\\n\\t\\treturn string(abi.encodePacked(base, tokenUri));\\n\\t}\\n\\n\\tfunction getTokenBreed(uint256 tokenId) external view returns (Breed) {\\n\\t\\tif (!_exists(tokenId)) revert CuteDoggies__TokenDoesNotExist();\\n\\t\\treturn s_tokenIdToBreed[tokenId];\\n\\t}\\n\\n\\tfunction getChanceArray() public pure returns (uint256[3] memory) {\\n\\t\\treturn [10, 30, MAX_CHANCE_VALUE];\\n\\t}\\n\\n\\tfunction getMaxChanceValue() external pure returns (uint256) {\\n\\t\\treturn MAX_CHANCE_VALUE;\\n\\t}\\n\\n\\tfunction getRequestIdToSender(uint256 requestId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (address)\\n\\t{\\n\\t\\treturn s_requestIdToSender[requestId];\\n\\t}\\n\\n\\tfunction totalSupply() public view returns (uint256) {\\n\\t\\treturn s_tokenCounter;\\n\\t}\\n\\n\\tfunction getMintFee() external view returns (uint256) {\\n\\t\\treturn i_mintFee;\\n\\t}\\n\\n\\tfunction getVrfCoordinatorV2() external view returns (address) {\\n\\t\\treturn address(i_vrfCoordinator);\\n\\t}\\n\\n\\tfunction getGasLane() external view returns (bytes32) {\\n\\t\\treturn i_gasLane;\\n\\t}\\n\\n\\tfunction getSubId() external view returns (uint64) {\\n\\t\\treturn i_subId;\\n\\t}\\n\\n\\tfunction getNumWords() external pure returns (uint32) {\\n\\t\\treturn NUM_WORDS;\\n\\t}\\n\\n\\tfunction getRequestConfirmations() external pure returns (uint16) {\\n\\t\\treturn REQUEST_CONFIRMATIONS;\\n\\t}\\n\\n\\tfunction getCallBackGasLimit() external view returns (uint32) {\\n\\t\\treturn i_callbackGasLimit;\\n\\t}\\n\\n\\tfunction _baseURI() internal pure override returns (string memory) {\\n\\t\\treturn \\\"ipfs://Qma1ewwyXeZoiMfwNVcjeR14S2QVgeNJE5UhZEkL6SCZnp/\\\";\\n\\t}\\n\\n\\tfunction getDoggiesUri(uint256 tokenId)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (string memory)\\n\\t{\\n\\t\\tBreed currentTokenBreed = s_tokenIdToBreed[tokenId];\\n\\n\\t\\tif (currentTokenBreed == Breed.ST_BERNARD) {\\n\\t\\t\\treturn \\\"st-bernard.json\\\";\\n\\t\\t} else if (currentTokenBreed == Breed.SHIBA_INU)\\n\\t\\t\\treturn \\\"shiba-inu.json\\\";\\n\\n\\t\\treturn \\\"pug.json\\\";\\n\\t}\\n}\\n\",\"keccak256\":\"0xd03ce3ec61339a2e86574422d16ade7605a4cc2125de2fa4ff65ffb3189b0409\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b5060405162004271380380620042718339818101604052810190620000389190620003d5565b6040518060400160405280600c81526020017f4375746520446f676769657300000000000000000000000000000000000000008152506040518060400160405280600881526020017f43446f6767696573000000000000000000000000000000000000000000000000815250868073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508160009081620000eb9190620006cd565b508060019081620000fd9190620006cd565b5050506200012062000114620001a160201b60201c565b620001a960201b60201c565b8473ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508367ffffffffffffffff1660e08167ffffffffffffffff16815250508261010081815250508163ffffffff1660c08163ffffffff16815250508061012081815250505050505050620007b4565b600033905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002a18262000274565b9050919050565b620002b38162000294565b8114620002bf57600080fd5b50565b600081519050620002d381620002a8565b92915050565b600067ffffffffffffffff82169050919050565b620002f881620002d9565b81146200030457600080fd5b50565b6000815190506200031881620002ed565b92915050565b6000819050919050565b62000333816200031e565b81146200033f57600080fd5b50565b600081519050620003538162000328565b92915050565b600063ffffffff82169050919050565b620003748162000359565b81146200038057600080fd5b50565b600081519050620003948162000369565b92915050565b6000819050919050565b620003af816200039a565b8114620003bb57600080fd5b50565b600081519050620003cf81620003a4565b92915050565b600080600080600060a08688031215620003f457620003f36200026f565b5b60006200040488828901620002c2565b9550506020620004178882890162000307565b94505060406200042a8882890162000342565b93505060606200043d8882890162000383565b92505060806200045088828901620003be565b9150509295509295909350565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620004df57607f821691505b602082108103620004f557620004f462000497565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200055f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000520565b6200056b868362000520565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620005ae620005a8620005a2846200039a565b62000583565b6200039a565b9050919050565b6000819050919050565b620005ca836200058d565b620005e2620005d982620005b5565b8484546200052d565b825550505050565b600090565b620005f9620005ea565b62000606818484620005bf565b505050565b5b818110156200062e5762000622600082620005ef565b6001810190506200060c565b5050565b601f8211156200067d576200064781620004fb565b620006528462000510565b8101602085101562000662578190505b6200067a620006718562000510565b8301826200060b565b50505b505050565b600082821c905092915050565b6000620006a26000198460080262000682565b1980831691505092915050565b6000620006bd83836200068f565b9150826002028217905092915050565b620006d8826200045d565b67ffffffffffffffff811115620006f457620006f362000468565b5b620007008254620004c6565b6200070d82828562000632565b600060209050601f83116001811462000745576000841562000730578287015190505b6200073c8582620006af565b865550620007ac565b601f1984166200075586620004fb565b60005b828110156200077f5784890151825560018201915060208501945060208101905062000758565b868310156200079f57848901516200079b601f8916826200068f565b8355505b6001600288020188555050505b505050505050565b60805160a05160c05160e0516101005161012051613a3c62000835600039600081816107720152818161079b0152610fcc01526000818161083701526111d8015260008181610858015261154e01526000818161087b0152610dcb0152600081816107fb0152610c83015260008181610ca90152610cfd0152613a3c6000f3fe6080604052600436106101dc5760003560e01c8063715018a611610102578063b88d4fde11610095578063e985e9c511610064578063e985e9c5146106b6578063f2fde38b146106f3578063f3fef3a31461071c578063fbc6ba6f14610745576101eb565b8063b88d4fde146105fa578063c19dd76b14610623578063c245999c1461064e578063c87b56dd14610679576101eb565b806392eb7aa6116100d157806392eb7aa61461052c57806395d89b4114610569578063a22cb46514610594578063a6d37139146105bd576101eb565b8063715018a6146104b55780637a5caab3146104cc5780637abd25d1146104f75780638da5cb5b14610501576101eb565b806323b872dd1161017a5780635dacf5f4116101495780635dacf5f4146103e55780635f1b0fd8146104105780636352211e1461043b57806370a0823114610478576101eb565b806323b872dd1461033d5780633cdb93611461036657806342842e0e1461039157806353a2c19a146103ba576101eb565b8063095ea7b3116101b6578063095ea7b31461029557806318160ddd146102be5780631e82a26c146102e95780631fe543e314610314576101eb565b806301ffc9a7146101f057806306fdde031461022d578063081812fc14610258576101eb565b366101eb576101e9610770565b005b600080fd5b3480156101fc57600080fd5b5061021760048036038101906102129190612591565b6109a4565b60405161022491906125d9565b60405180910390f35b34801561023957600080fd5b50610242610a86565b60405161024f9190612684565b60405180910390f35b34801561026457600080fd5b5061027f600480360381019061027a91906126dc565b610b18565b60405161028c919061274a565b60405180910390f35b3480156102a157600080fd5b506102bc60048036038101906102b79190612791565b610b5e565b005b3480156102ca57600080fd5b506102d3610c75565b6040516102e091906127e0565b60405180910390f35b3480156102f557600080fd5b506102fe610c7f565b60405161030b919061274a565b60405180910390f35b34801561032057600080fd5b5061033b60048036038101906103369190612943565b610ca7565b005b34801561034957600080fd5b50610364600480360381019061035f919061299f565b610d67565b005b34801561037257600080fd5b5061037b610dc7565b6040516103889190612a11565b60405180910390f35b34801561039d57600080fd5b506103b860048036038101906103b3919061299f565b610def565b005b3480156103c657600080fd5b506103cf610e0f565b6040516103dc9190612a11565b60405180910390f35b3480156103f157600080fd5b506103fa610e18565b6040516104079190612ad7565b60405180910390f35b34801561041c57600080fd5b50610425610e43565b6040516104329190612b0f565b60405180910390f35b34801561044757600080fd5b50610462600480360381019061045d91906126dc565b610e4c565b60405161046f919061274a565b60405180910390f35b34801561048457600080fd5b5061049f600480360381019061049a9190612b2a565b610efd565b6040516104ac91906127e0565b60405180910390f35b3480156104c157600080fd5b506104ca610fb4565b005b3480156104d857600080fd5b506104e1610fc8565b6040516104ee91906127e0565b60405180910390f35b6104ff610ff0565b005b34801561050d57600080fd5b50610516610ffa565b604051610523919061274a565b60405180910390f35b34801561053857600080fd5b50610553600480360381019061054e91906126dc565b611024565b6040516105609190612bce565b60405180910390f35b34801561057557600080fd5b5061057e61108d565b60405161058b9190612684565b60405180910390f35b3480156105a057600080fd5b506105bb60048036038101906105b69190612c15565b61111f565b005b3480156105c957600080fd5b506105e460048036038101906105df91906126dc565b611135565b6040516105f1919061274a565b60405180910390f35b34801561060657600080fd5b50610621600480360381019061061c9190612d0a565b611172565b005b34801561062f57600080fd5b506106386111d4565b6040516106459190612da6565b60405180910390f35b34801561065a57600080fd5b506106636111fc565b60405161067091906127e0565b60405180910390f35b34801561068557600080fd5b506106a0600480360381019061069b91906126dc565b611205565b6040516106ad9190612684565b60405180910390f35b3480156106c257600080fd5b506106dd60048036038101906106d89190612dc1565b61128a565b6040516106ea91906125d9565b60405180910390f35b3480156106ff57600080fd5b5061071a60048036038101906107159190612b2a565b61131e565b005b34801561072857600080fd5b50610743600480360381019061073e9190612e3f565b6113a1565b005b34801561075157600080fd5b5061075a61154a565b6040516107679190612ea2565b60405180910390f35b7f00000000000000000000000000000000000000000000000000000000000000003410156107f757347f00000000000000000000000000000000000000000000000000000000000000006040517fbb2021700000000000000000000000000000000000000000000000000000000081526004016107ee929190612ebd565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016108bc959493929190612ee6565b6020604051808303816000875af11580156108db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ff9190612f4e565b9050336007600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fe853b366dca67cf89b7213af808bf47eda75d4e4cb3fa4e01ed74000141e48988260405161099991906127e0565b60405180910390a250565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610a6f57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610a7f5750610a7e82611572565b5b9050919050565b606060008054610a9590612faa565b80601f0160208091040260200160405190810160405280929190818152602001828054610ac190612faa565b8015610b0e5780601f10610ae357610100808354040283529160200191610b0e565b820191906000526020600020905b815481529060010190602001808311610af157829003601f168201915b5050505050905090565b6000610b23826115dc565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610b6982610e4c565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610bd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd09061304d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610bf8611627565b73ffffffffffffffffffffffffffffffffffffffff161480610c275750610c2681610c21611627565b61128a565b5b610c66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5d906130df565b60405180910390fd5b610c70838361162f565b505050565b6000600854905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d5957337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610d509291906130ff565b60405180910390fd5b610d6382826116e8565b5050565b610d78610d72611627565b82611845565b610db7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dae9061319a565b60405180910390fd5b610dc28383836118da565b505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b610e0a83838360405180602001604052806000815250611172565b505050565b60006001905090565b610e20612503565b6040518060600160405280600a8152602001601e81526020016064815250905090565b60006003905090565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ef4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eeb90613206565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6490613298565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610fbc611b40565b610fc66000611bbe565b565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b610ff8610770565b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061102f82611c84565b611065576040517f7c5eea4f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6009600083815260200190815260200160002060009054906101000a900460ff169050919050565b60606001805461109c90612faa565b80601f01602080910402602001604051908101604052809291908181526020018280546110c890612faa565b80156111155780601f106110ea57610100808354040283529160200191611115565b820191906000526020600020905b8154815290600101906020018083116110f857829003601f168201915b5050505050905090565b61113161112a611627565b8383611cf0565b5050565b60006007600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b61118361117d611627565b83611845565b6111c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b99061319a565b60405180910390fd5b6111ce84848484611e5c565b50505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60006064905090565b606061121082611c84565b611246576040517f7c5eea4f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611250611eb8565b9050600061125d84611ed8565b905081816040516020016112729291906132f4565b60405160208183030381529060405292505050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611326611b40565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611395576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138c9061338a565b60405180910390fd5b61139e81611bbe565b50565b6113a9611b40565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361140f576040517f14edda5a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081148061141d57504781115b15611454576040517f6650649c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405161147a906133db565b60006040518083038185875af1925050503d80600081146114b7576040519150601f19603f3d011682016040523d82523d6000602084013e6114bc565b606091505b50509050806114f7576040517f32dcd68700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff167feaff4b37086828766ad3268786972c0cd24259d4c87a80f9d3963a3c3d999b0d8360405161153d91906127e0565b60405180910390a2505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6115e581611c84565b611624576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161b90613206565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166116a283610e4c565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006007600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506007600084815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560006008600081546117679061341f565b91905081905590506117798282612011565b600060648460008151811061179157611790613467565b5b60200260200101516117a391906134c5565b905060006117b08261202f565b9050806009600085815260200190815260200160002060006101000a81548160ff021916908360028111156117e8576117e7612b57565b5b02179055508373ffffffffffffffffffffffffffffffffffffffff167f5716925f2a990bb51e5354134a606547c86dc787be1a2729eef575fd0c2bea1e87836040516118359291906134f6565b60405180910390a2505050505050565b60008061185183610e4c565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806118935750611892818561128a565b5b806118d157508373ffffffffffffffffffffffffffffffffffffffff166118b984610b18565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166118fa82610e4c565b73ffffffffffffffffffffffffffffffffffffffff1614611950576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194790613591565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036119bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b690613623565b60405180910390fd5b6119ca83838361211b565b6119d560008261162f565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a259190613643565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a7c9190613677565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611b3b838383612120565b505050565b611b48611627565b73ffffffffffffffffffffffffffffffffffffffff16611b66610ffa565b73ffffffffffffffffffffffffffffffffffffffff1614611bbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bb3906136f7565b60405180910390fd5b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611d5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5590613763565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611e4f91906125d9565b60405180910390a3505050565b611e678484846118da565b611e7384848484612125565b611eb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ea9906137f5565b60405180910390fd5b50505050565b60606040518060600160405280603681526020016139d160369139905090565b606060006009600084815260200190815260200160002060009054906101000a900460ff169050600280811115611f1257611f11612b57565b5b816002811115611f2557611f24612b57565b5b03611f68576040518060400160405280600f81526020017f73742d6265726e6172642e6a736f6e000000000000000000000000000000000081525091505061200c565b60016002811115611f7c57611f7b612b57565b5b816002811115611f8f57611f8e612b57565b5b03611fd2576040518060400160405280600e81526020017f73686962612d696e752e6a736f6e00000000000000000000000000000000000081525091505061200c565b6040518060400160405280600881526020017f7075672e6a736f6e0000000000000000000000000000000000000000000000008152509150505b919050565b61202b8282604051806020016040528060008152506122ac565b5050565b600080600061203c610e18565b905060005b60038110156120d55782851015801561207b575081816003811061206857612067613467565b5b6020020151836120789190613677565b85105b1561209d5780600281111561209357612092612b57565b5b9350505050612116565b8181600381106120b0576120af613467565b5b6020020151836120c09190613677565b925080806120cd9061341f565b915050612041565b506064846040517fd42ff58600000000000000000000000000000000000000000000000000000000815260040161210d929190612ebd565b60405180910390fd5b919050565b505050565b505050565b60006121468473ffffffffffffffffffffffffffffffffffffffff16612307565b1561229f578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261216f611627565b8786866040518563ffffffff1660e01b8152600401612191949392919061386a565b6020604051808303816000875af19250505080156121cd57506040513d601f19601f820116820180604052508101906121ca91906138cb565b60015b61224f573d80600081146121fd576040519150601f19603f3d011682016040523d82523d6000602084013e612202565b606091505b506000815103612247576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161223e906137f5565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506122a4565b600190505b949350505050565b6122b6838361232a565b6122c36000848484612125565b612302576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122f9906137f5565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612399576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239090613944565b60405180910390fd5b6123a281611c84565b156123e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123d9906139b0565b60405180910390fd5b6123ee6000838361211b565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461243e9190613677565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46124ff60008383612120565b5050565b6040518060600160405280600390602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61256e81612539565b811461257957600080fd5b50565b60008135905061258b81612565565b92915050565b6000602082840312156125a7576125a661252f565b5b60006125b58482850161257c565b91505092915050565b60008115159050919050565b6125d3816125be565b82525050565b60006020820190506125ee60008301846125ca565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561262e578082015181840152602081019050612613565b60008484015250505050565b6000601f19601f8301169050919050565b6000612656826125f4565b61266081856125ff565b9350612670818560208601612610565b6126798161263a565b840191505092915050565b6000602082019050818103600083015261269e818461264b565b905092915050565b6000819050919050565b6126b9816126a6565b81146126c457600080fd5b50565b6000813590506126d6816126b0565b92915050565b6000602082840312156126f2576126f161252f565b5b6000612700848285016126c7565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061273482612709565b9050919050565b61274481612729565b82525050565b600060208201905061275f600083018461273b565b92915050565b61276e81612729565b811461277957600080fd5b50565b60008135905061278b81612765565b92915050565b600080604083850312156127a8576127a761252f565b5b60006127b68582860161277c565b92505060206127c7858286016126c7565b9150509250929050565b6127da816126a6565b82525050565b60006020820190506127f560008301846127d1565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6128388261263a565b810181811067ffffffffffffffff8211171561285757612856612800565b5b80604052505050565b600061286a612525565b9050612876828261282f565b919050565b600067ffffffffffffffff82111561289657612895612800565b5b602082029050602081019050919050565b600080fd5b60006128bf6128ba8461287b565b612860565b905080838252602082019050602084028301858111156128e2576128e16128a7565b5b835b8181101561290b57806128f788826126c7565b8452602084019350506020810190506128e4565b5050509392505050565b600082601f83011261292a576129296127fb565b5b813561293a8482602086016128ac565b91505092915050565b6000806040838503121561295a5761295961252f565b5b6000612968858286016126c7565b925050602083013567ffffffffffffffff81111561298957612988612534565b5b61299585828601612915565b9150509250929050565b6000806000606084860312156129b8576129b761252f565b5b60006129c68682870161277c565b93505060206129d78682870161277c565b92505060406129e8868287016126c7565b9150509250925092565b600063ffffffff82169050919050565b612a0b816129f2565b82525050565b6000602082019050612a266000830184612a02565b92915050565b600060039050919050565b600081905092915050565b6000819050919050565b612a55816126a6565b82525050565b6000612a678383612a4c565b60208301905092915050565b6000602082019050919050565b612a8981612a2c565b612a938184612a37565b9250612a9e82612a42565b8060005b83811015612acf578151612ab68782612a5b565b9650612ac183612a73565b925050600181019050612aa2565b505050505050565b6000606082019050612aec6000830184612a80565b92915050565b600061ffff82169050919050565b612b0981612af2565b82525050565b6000602082019050612b246000830184612b00565b92915050565b600060208284031215612b4057612b3f61252f565b5b6000612b4e8482850161277c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110612b9757612b96612b57565b5b50565b6000819050612ba882612b86565b919050565b6000612bb882612b9a565b9050919050565b612bc881612bad565b82525050565b6000602082019050612be36000830184612bbf565b92915050565b612bf2816125be565b8114612bfd57600080fd5b50565b600081359050612c0f81612be9565b92915050565b60008060408385031215612c2c57612c2b61252f565b5b6000612c3a8582860161277c565b9250506020612c4b85828601612c00565b9150509250929050565b600080fd5b600067ffffffffffffffff821115612c7557612c74612800565b5b612c7e8261263a565b9050602081019050919050565b82818337600083830152505050565b6000612cad612ca884612c5a565b612860565b905082815260208101848484011115612cc957612cc8612c55565b5b612cd4848285612c8b565b509392505050565b600082601f830112612cf157612cf06127fb565b5b8135612d01848260208601612c9a565b91505092915050565b60008060008060808587031215612d2457612d2361252f565b5b6000612d328782880161277c565b9450506020612d438782880161277c565b9350506040612d54878288016126c7565b925050606085013567ffffffffffffffff811115612d7557612d74612534565b5b612d8187828801612cdc565b91505092959194509250565b6000819050919050565b612da081612d8d565b82525050565b6000602082019050612dbb6000830184612d97565b92915050565b60008060408385031215612dd857612dd761252f565b5b6000612de68582860161277c565b9250506020612df78582860161277c565b9150509250929050565b6000612e0c82612709565b9050919050565b612e1c81612e01565b8114612e2757600080fd5b50565b600081359050612e3981612e13565b92915050565b60008060408385031215612e5657612e5561252f565b5b6000612e6485828601612e2a565b9250506020612e75858286016126c7565b9150509250929050565b600067ffffffffffffffff82169050919050565b612e9c81612e7f565b82525050565b6000602082019050612eb76000830184612e93565b92915050565b6000604082019050612ed260008301856127d1565b612edf60208301846127d1565b9392505050565b600060a082019050612efb6000830188612d97565b612f086020830187612e93565b612f156040830186612b00565b612f226060830185612a02565b612f2f6080830184612a02565b9695505050505050565b600081519050612f48816126b0565b92915050565b600060208284031215612f6457612f6361252f565b5b6000612f7284828501612f39565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612fc257607f821691505b602082108103612fd557612fd4612f7b565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006130376021836125ff565b915061304282612fdb565b604082019050919050565b600060208201905081810360008301526130668161302a565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b60006130c9603e836125ff565b91506130d48261306d565b604082019050919050565b600060208201905081810360008301526130f8816130bc565b9050919050565b6000604082019050613114600083018561273b565b613121602083018461273b565b9392505050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000613184602e836125ff565b915061318f82613128565b604082019050919050565b600060208201905081810360008301526131b381613177565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006131f06018836125ff565b91506131fb826131ba565b602082019050919050565b6000602082019050818103600083015261321f816131e3565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006132826029836125ff565b915061328d82613226565b604082019050919050565b600060208201905081810360008301526132b181613275565b9050919050565b600081905092915050565b60006132ce826125f4565b6132d881856132b8565b93506132e8818560208601612610565b80840191505092915050565b600061330082856132c3565b915061330c82846132c3565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006133746026836125ff565b915061337f82613318565b604082019050919050565b600060208201905081810360008301526133a381613367565b9050919050565b600081905092915050565b50565b60006133c56000836133aa565b91506133d0826133b5565b600082019050919050565b60006133e6826133b8565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061342a826126a6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361345c5761345b6133f0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006134d0826126a6565b91506134db836126a6565b9250826134eb576134ea613496565b5b828206905092915050565b600060408201905061350b60008301856127d1565b6135186020830184612bbf565b9392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b600061357b6025836125ff565b91506135868261351f565b604082019050919050565b600060208201905081810360008301526135aa8161356e565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061360d6024836125ff565b9150613618826135b1565b604082019050919050565b6000602082019050818103600083015261363c81613600565b9050919050565b600061364e826126a6565b9150613659836126a6565b9250828203905081811115613671576136706133f0565b5b92915050565b6000613682826126a6565b915061368d836126a6565b92508282019050808211156136a5576136a46133f0565b5b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006136e16020836125ff565b91506136ec826136ab565b602082019050919050565b60006020820190508181036000830152613710816136d4565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061374d6019836125ff565b915061375882613717565b602082019050919050565b6000602082019050818103600083015261377c81613740565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006137df6032836125ff565b91506137ea82613783565b604082019050919050565b6000602082019050818103600083015261380e816137d2565b9050919050565b600081519050919050565b600082825260208201905092915050565b600061383c82613815565b6138468185613820565b9350613856818560208601612610565b61385f8161263a565b840191505092915050565b600060808201905061387f600083018761273b565b61388c602083018661273b565b61389960408301856127d1565b81810360608301526138ab8184613831565b905095945050505050565b6000815190506138c581612565565b92915050565b6000602082840312156138e1576138e061252f565b5b60006138ef848285016138b6565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b600061392e6020836125ff565b9150613939826138f8565b602082019050919050565b6000602082019050818103600083015261395d81613921565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b600061399a601c836125ff565b91506139a582613964565b602082019050919050565b600060208201905081810360008301526139c98161398d565b905091905056fe697066733a2f2f516d61316577777958655a6f694d66774e56636a655231345332515667654e4a453555685a456b4c3653435a6e702fa26469706673582212208b6ff315a554ff04374d90861832f148c08cf8816e9c95a0e46481b95e63992b64736f6c63430008100033",
  "deployedBytecode": "0x6080604052600436106101dc5760003560e01c8063715018a611610102578063b88d4fde11610095578063e985e9c511610064578063e985e9c5146106b6578063f2fde38b146106f3578063f3fef3a31461071c578063fbc6ba6f14610745576101eb565b8063b88d4fde146105fa578063c19dd76b14610623578063c245999c1461064e578063c87b56dd14610679576101eb565b806392eb7aa6116100d157806392eb7aa61461052c57806395d89b4114610569578063a22cb46514610594578063a6d37139146105bd576101eb565b8063715018a6146104b55780637a5caab3146104cc5780637abd25d1146104f75780638da5cb5b14610501576101eb565b806323b872dd1161017a5780635dacf5f4116101495780635dacf5f4146103e55780635f1b0fd8146104105780636352211e1461043b57806370a0823114610478576101eb565b806323b872dd1461033d5780633cdb93611461036657806342842e0e1461039157806353a2c19a146103ba576101eb565b8063095ea7b3116101b6578063095ea7b31461029557806318160ddd146102be5780631e82a26c146102e95780631fe543e314610314576101eb565b806301ffc9a7146101f057806306fdde031461022d578063081812fc14610258576101eb565b366101eb576101e9610770565b005b600080fd5b3480156101fc57600080fd5b5061021760048036038101906102129190612591565b6109a4565b60405161022491906125d9565b60405180910390f35b34801561023957600080fd5b50610242610a86565b60405161024f9190612684565b60405180910390f35b34801561026457600080fd5b5061027f600480360381019061027a91906126dc565b610b18565b60405161028c919061274a565b60405180910390f35b3480156102a157600080fd5b506102bc60048036038101906102b79190612791565b610b5e565b005b3480156102ca57600080fd5b506102d3610c75565b6040516102e091906127e0565b60405180910390f35b3480156102f557600080fd5b506102fe610c7f565b60405161030b919061274a565b60405180910390f35b34801561032057600080fd5b5061033b60048036038101906103369190612943565b610ca7565b005b34801561034957600080fd5b50610364600480360381019061035f919061299f565b610d67565b005b34801561037257600080fd5b5061037b610dc7565b6040516103889190612a11565b60405180910390f35b34801561039d57600080fd5b506103b860048036038101906103b3919061299f565b610def565b005b3480156103c657600080fd5b506103cf610e0f565b6040516103dc9190612a11565b60405180910390f35b3480156103f157600080fd5b506103fa610e18565b6040516104079190612ad7565b60405180910390f35b34801561041c57600080fd5b50610425610e43565b6040516104329190612b0f565b60405180910390f35b34801561044757600080fd5b50610462600480360381019061045d91906126dc565b610e4c565b60405161046f919061274a565b60405180910390f35b34801561048457600080fd5b5061049f600480360381019061049a9190612b2a565b610efd565b6040516104ac91906127e0565b60405180910390f35b3480156104c157600080fd5b506104ca610fb4565b005b3480156104d857600080fd5b506104e1610fc8565b6040516104ee91906127e0565b60405180910390f35b6104ff610ff0565b005b34801561050d57600080fd5b50610516610ffa565b604051610523919061274a565b60405180910390f35b34801561053857600080fd5b50610553600480360381019061054e91906126dc565b611024565b6040516105609190612bce565b60405180910390f35b34801561057557600080fd5b5061057e61108d565b60405161058b9190612684565b60405180910390f35b3480156105a057600080fd5b506105bb60048036038101906105b69190612c15565b61111f565b005b3480156105c957600080fd5b506105e460048036038101906105df91906126dc565b611135565b6040516105f1919061274a565b60405180910390f35b34801561060657600080fd5b50610621600480360381019061061c9190612d0a565b611172565b005b34801561062f57600080fd5b506106386111d4565b6040516106459190612da6565b60405180910390f35b34801561065a57600080fd5b506106636111fc565b60405161067091906127e0565b60405180910390f35b34801561068557600080fd5b506106a0600480360381019061069b91906126dc565b611205565b6040516106ad9190612684565b60405180910390f35b3480156106c257600080fd5b506106dd60048036038101906106d89190612dc1565b61128a565b6040516106ea91906125d9565b60405180910390f35b3480156106ff57600080fd5b5061071a60048036038101906107159190612b2a565b61131e565b005b34801561072857600080fd5b50610743600480360381019061073e9190612e3f565b6113a1565b005b34801561075157600080fd5b5061075a61154a565b6040516107679190612ea2565b60405180910390f35b7f00000000000000000000000000000000000000000000000000000000000000003410156107f757347f00000000000000000000000000000000000000000000000000000000000000006040517fbb2021700000000000000000000000000000000000000000000000000000000081526004016107ee929190612ebd565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016108bc959493929190612ee6565b6020604051808303816000875af11580156108db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ff9190612f4e565b9050336007600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fe853b366dca67cf89b7213af808bf47eda75d4e4cb3fa4e01ed74000141e48988260405161099991906127e0565b60405180910390a250565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610a6f57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610a7f5750610a7e82611572565b5b9050919050565b606060008054610a9590612faa565b80601f0160208091040260200160405190810160405280929190818152602001828054610ac190612faa565b8015610b0e5780601f10610ae357610100808354040283529160200191610b0e565b820191906000526020600020905b815481529060010190602001808311610af157829003601f168201915b5050505050905090565b6000610b23826115dc565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610b6982610e4c565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610bd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd09061304d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610bf8611627565b73ffffffffffffffffffffffffffffffffffffffff161480610c275750610c2681610c21611627565b61128a565b5b610c66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5d906130df565b60405180910390fd5b610c70838361162f565b505050565b6000600854905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d5957337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610d509291906130ff565b60405180910390fd5b610d6382826116e8565b5050565b610d78610d72611627565b82611845565b610db7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dae9061319a565b60405180910390fd5b610dc28383836118da565b505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b610e0a83838360405180602001604052806000815250611172565b505050565b60006001905090565b610e20612503565b6040518060600160405280600a8152602001601e81526020016064815250905090565b60006003905090565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ef4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eeb90613206565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6490613298565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610fbc611b40565b610fc66000611bbe565b565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b610ff8610770565b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061102f82611c84565b611065576040517f7c5eea4f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6009600083815260200190815260200160002060009054906101000a900460ff169050919050565b60606001805461109c90612faa565b80601f01602080910402602001604051908101604052809291908181526020018280546110c890612faa565b80156111155780601f106110ea57610100808354040283529160200191611115565b820191906000526020600020905b8154815290600101906020018083116110f857829003601f168201915b5050505050905090565b61113161112a611627565b8383611cf0565b5050565b60006007600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b61118361117d611627565b83611845565b6111c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b99061319a565b60405180910390fd5b6111ce84848484611e5c565b50505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60006064905090565b606061121082611c84565b611246576040517f7c5eea4f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611250611eb8565b9050600061125d84611ed8565b905081816040516020016112729291906132f4565b60405160208183030381529060405292505050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611326611b40565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611395576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138c9061338a565b60405180910390fd5b61139e81611bbe565b50565b6113a9611b40565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361140f576040517f14edda5a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081148061141d57504781115b15611454576040517f6650649c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405161147a906133db565b60006040518083038185875af1925050503d80600081146114b7576040519150601f19603f3d011682016040523d82523d6000602084013e6114bc565b606091505b50509050806114f7576040517f32dcd68700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff167feaff4b37086828766ad3268786972c0cd24259d4c87a80f9d3963a3c3d999b0d8360405161153d91906127e0565b60405180910390a2505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6115e581611c84565b611624576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161b90613206565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166116a283610e4c565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006007600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506007600084815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560006008600081546117679061341f565b91905081905590506117798282612011565b600060648460008151811061179157611790613467565b5b60200260200101516117a391906134c5565b905060006117b08261202f565b9050806009600085815260200190815260200160002060006101000a81548160ff021916908360028111156117e8576117e7612b57565b5b02179055508373ffffffffffffffffffffffffffffffffffffffff167f5716925f2a990bb51e5354134a606547c86dc787be1a2729eef575fd0c2bea1e87836040516118359291906134f6565b60405180910390a2505050505050565b60008061185183610e4c565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806118935750611892818561128a565b5b806118d157508373ffffffffffffffffffffffffffffffffffffffff166118b984610b18565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166118fa82610e4c565b73ffffffffffffffffffffffffffffffffffffffff1614611950576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194790613591565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036119bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b690613623565b60405180910390fd5b6119ca83838361211b565b6119d560008261162f565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a259190613643565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a7c9190613677565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611b3b838383612120565b505050565b611b48611627565b73ffffffffffffffffffffffffffffffffffffffff16611b66610ffa565b73ffffffffffffffffffffffffffffffffffffffff1614611bbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bb3906136f7565b60405180910390fd5b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611d5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5590613763565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611e4f91906125d9565b60405180910390a3505050565b611e678484846118da565b611e7384848484612125565b611eb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ea9906137f5565b60405180910390fd5b50505050565b60606040518060600160405280603681526020016139d160369139905090565b606060006009600084815260200190815260200160002060009054906101000a900460ff169050600280811115611f1257611f11612b57565b5b816002811115611f2557611f24612b57565b5b03611f68576040518060400160405280600f81526020017f73742d6265726e6172642e6a736f6e000000000000000000000000000000000081525091505061200c565b60016002811115611f7c57611f7b612b57565b5b816002811115611f8f57611f8e612b57565b5b03611fd2576040518060400160405280600e81526020017f73686962612d696e752e6a736f6e00000000000000000000000000000000000081525091505061200c565b6040518060400160405280600881526020017f7075672e6a736f6e0000000000000000000000000000000000000000000000008152509150505b919050565b61202b8282604051806020016040528060008152506122ac565b5050565b600080600061203c610e18565b905060005b60038110156120d55782851015801561207b575081816003811061206857612067613467565b5b6020020151836120789190613677565b85105b1561209d5780600281111561209357612092612b57565b5b9350505050612116565b8181600381106120b0576120af613467565b5b6020020151836120c09190613677565b925080806120cd9061341f565b915050612041565b506064846040517fd42ff58600000000000000000000000000000000000000000000000000000000815260040161210d929190612ebd565b60405180910390fd5b919050565b505050565b505050565b60006121468473ffffffffffffffffffffffffffffffffffffffff16612307565b1561229f578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261216f611627565b8786866040518563ffffffff1660e01b8152600401612191949392919061386a565b6020604051808303816000875af19250505080156121cd57506040513d601f19601f820116820180604052508101906121ca91906138cb565b60015b61224f573d80600081146121fd576040519150601f19603f3d011682016040523d82523d6000602084013e612202565b606091505b506000815103612247576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161223e906137f5565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506122a4565b600190505b949350505050565b6122b6838361232a565b6122c36000848484612125565b612302576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122f9906137f5565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612399576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239090613944565b60405180910390fd5b6123a281611c84565b156123e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123d9906139b0565b60405180910390fd5b6123ee6000838361211b565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461243e9190613677565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46124ff60008383612120565b5050565b6040518060600160405280600390602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61256e81612539565b811461257957600080fd5b50565b60008135905061258b81612565565b92915050565b6000602082840312156125a7576125a661252f565b5b60006125b58482850161257c565b91505092915050565b60008115159050919050565b6125d3816125be565b82525050565b60006020820190506125ee60008301846125ca565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561262e578082015181840152602081019050612613565b60008484015250505050565b6000601f19601f8301169050919050565b6000612656826125f4565b61266081856125ff565b9350612670818560208601612610565b6126798161263a565b840191505092915050565b6000602082019050818103600083015261269e818461264b565b905092915050565b6000819050919050565b6126b9816126a6565b81146126c457600080fd5b50565b6000813590506126d6816126b0565b92915050565b6000602082840312156126f2576126f161252f565b5b6000612700848285016126c7565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061273482612709565b9050919050565b61274481612729565b82525050565b600060208201905061275f600083018461273b565b92915050565b61276e81612729565b811461277957600080fd5b50565b60008135905061278b81612765565b92915050565b600080604083850312156127a8576127a761252f565b5b60006127b68582860161277c565b92505060206127c7858286016126c7565b9150509250929050565b6127da816126a6565b82525050565b60006020820190506127f560008301846127d1565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6128388261263a565b810181811067ffffffffffffffff8211171561285757612856612800565b5b80604052505050565b600061286a612525565b9050612876828261282f565b919050565b600067ffffffffffffffff82111561289657612895612800565b5b602082029050602081019050919050565b600080fd5b60006128bf6128ba8461287b565b612860565b905080838252602082019050602084028301858111156128e2576128e16128a7565b5b835b8181101561290b57806128f788826126c7565b8452602084019350506020810190506128e4565b5050509392505050565b600082601f83011261292a576129296127fb565b5b813561293a8482602086016128ac565b91505092915050565b6000806040838503121561295a5761295961252f565b5b6000612968858286016126c7565b925050602083013567ffffffffffffffff81111561298957612988612534565b5b61299585828601612915565b9150509250929050565b6000806000606084860312156129b8576129b761252f565b5b60006129c68682870161277c565b93505060206129d78682870161277c565b92505060406129e8868287016126c7565b9150509250925092565b600063ffffffff82169050919050565b612a0b816129f2565b82525050565b6000602082019050612a266000830184612a02565b92915050565b600060039050919050565b600081905092915050565b6000819050919050565b612a55816126a6565b82525050565b6000612a678383612a4c565b60208301905092915050565b6000602082019050919050565b612a8981612a2c565b612a938184612a37565b9250612a9e82612a42565b8060005b83811015612acf578151612ab68782612a5b565b9650612ac183612a73565b925050600181019050612aa2565b505050505050565b6000606082019050612aec6000830184612a80565b92915050565b600061ffff82169050919050565b612b0981612af2565b82525050565b6000602082019050612b246000830184612b00565b92915050565b600060208284031215612b4057612b3f61252f565b5b6000612b4e8482850161277c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110612b9757612b96612b57565b5b50565b6000819050612ba882612b86565b919050565b6000612bb882612b9a565b9050919050565b612bc881612bad565b82525050565b6000602082019050612be36000830184612bbf565b92915050565b612bf2816125be565b8114612bfd57600080fd5b50565b600081359050612c0f81612be9565b92915050565b60008060408385031215612c2c57612c2b61252f565b5b6000612c3a8582860161277c565b9250506020612c4b85828601612c00565b9150509250929050565b600080fd5b600067ffffffffffffffff821115612c7557612c74612800565b5b612c7e8261263a565b9050602081019050919050565b82818337600083830152505050565b6000612cad612ca884612c5a565b612860565b905082815260208101848484011115612cc957612cc8612c55565b5b612cd4848285612c8b565b509392505050565b600082601f830112612cf157612cf06127fb565b5b8135612d01848260208601612c9a565b91505092915050565b60008060008060808587031215612d2457612d2361252f565b5b6000612d328782880161277c565b9450506020612d438782880161277c565b9350506040612d54878288016126c7565b925050606085013567ffffffffffffffff811115612d7557612d74612534565b5b612d8187828801612cdc565b91505092959194509250565b6000819050919050565b612da081612d8d565b82525050565b6000602082019050612dbb6000830184612d97565b92915050565b60008060408385031215612dd857612dd761252f565b5b6000612de68582860161277c565b9250506020612df78582860161277c565b9150509250929050565b6000612e0c82612709565b9050919050565b612e1c81612e01565b8114612e2757600080fd5b50565b600081359050612e3981612e13565b92915050565b60008060408385031215612e5657612e5561252f565b5b6000612e6485828601612e2a565b9250506020612e75858286016126c7565b9150509250929050565b600067ffffffffffffffff82169050919050565b612e9c81612e7f565b82525050565b6000602082019050612eb76000830184612e93565b92915050565b6000604082019050612ed260008301856127d1565b612edf60208301846127d1565b9392505050565b600060a082019050612efb6000830188612d97565b612f086020830187612e93565b612f156040830186612b00565b612f226060830185612a02565b612f2f6080830184612a02565b9695505050505050565b600081519050612f48816126b0565b92915050565b600060208284031215612f6457612f6361252f565b5b6000612f7284828501612f39565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612fc257607f821691505b602082108103612fd557612fd4612f7b565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006130376021836125ff565b915061304282612fdb565b604082019050919050565b600060208201905081810360008301526130668161302a565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b60006130c9603e836125ff565b91506130d48261306d565b604082019050919050565b600060208201905081810360008301526130f8816130bc565b9050919050565b6000604082019050613114600083018561273b565b613121602083018461273b565b9392505050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000613184602e836125ff565b915061318f82613128565b604082019050919050565b600060208201905081810360008301526131b381613177565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006131f06018836125ff565b91506131fb826131ba565b602082019050919050565b6000602082019050818103600083015261321f816131e3565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006132826029836125ff565b915061328d82613226565b604082019050919050565b600060208201905081810360008301526132b181613275565b9050919050565b600081905092915050565b60006132ce826125f4565b6132d881856132b8565b93506132e8818560208601612610565b80840191505092915050565b600061330082856132c3565b915061330c82846132c3565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006133746026836125ff565b915061337f82613318565b604082019050919050565b600060208201905081810360008301526133a381613367565b9050919050565b600081905092915050565b50565b60006133c56000836133aa565b91506133d0826133b5565b600082019050919050565b60006133e6826133b8565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061342a826126a6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361345c5761345b6133f0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006134d0826126a6565b91506134db836126a6565b9250826134eb576134ea613496565b5b828206905092915050565b600060408201905061350b60008301856127d1565b6135186020830184612bbf565b9392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b600061357b6025836125ff565b91506135868261351f565b604082019050919050565b600060208201905081810360008301526135aa8161356e565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061360d6024836125ff565b9150613618826135b1565b604082019050919050565b6000602082019050818103600083015261363c81613600565b9050919050565b600061364e826126a6565b9150613659836126a6565b9250828203905081811115613671576136706133f0565b5b92915050565b6000613682826126a6565b915061368d836126a6565b92508282019050808211156136a5576136a46133f0565b5b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006136e16020836125ff565b91506136ec826136ab565b602082019050919050565b60006020820190508181036000830152613710816136d4565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061374d6019836125ff565b915061375882613717565b602082019050919050565b6000602082019050818103600083015261377c81613740565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006137df6032836125ff565b91506137ea82613783565b604082019050919050565b6000602082019050818103600083015261380e816137d2565b9050919050565b600081519050919050565b600082825260208201905092915050565b600061383c82613815565b6138468185613820565b9350613856818560208601612610565b61385f8161263a565b840191505092915050565b600060808201905061387f600083018761273b565b61388c602083018661273b565b61389960408301856127d1565b81810360608301526138ab8184613831565b905095945050505050565b6000815190506138c581612565565b92915050565b6000602082840312156138e1576138e061252f565b5b60006138ef848285016138b6565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b600061392e6020836125ff565b9150613939826138f8565b602082019050919050565b6000602082019050818103600083015261395d81613921565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b600061399a601c836125ff565b91506139a582613964565b602082019050919050565b600060208201905081810360008301526139c98161398d565b905091905056fe697066733a2f2f516d61316577777958655a6f694d66774e56636a655231345332515667654e4a453555685a456b4c3653435a6e702fa26469706673582212208b6ff315a554ff04374d90861832f148c08cf8816e9c95a0e46481b95e63992b64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 292,
        "contract": "contracts/CuteDoggies.sol:CuteDoggies",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 294,
        "contract": "contracts/CuteDoggies.sol:CuteDoggies",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 298,
        "contract": "contracts/CuteDoggies.sol:CuteDoggies",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 302,
        "contract": "contracts/CuteDoggies.sol:CuteDoggies",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 306,
        "contract": "contracts/CuteDoggies.sol:CuteDoggies",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 312,
        "contract": "contracts/CuteDoggies.sol:CuteDoggies",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 161,
        "contract": "contracts/CuteDoggies.sol:CuteDoggies",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1928,
        "contract": "contracts/CuteDoggies.sol:CuteDoggies",
        "label": "s_requestIdToSender",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1935,
        "contract": "contracts/CuteDoggies.sol:CuteDoggies",
        "label": "s_tokenCounter",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1940,
        "contract": "contracts/CuteDoggies.sol:CuteDoggies",
        "label": "s_tokenIdToBreed",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_enum(Breed)1909)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Breed)1909": {
        "encoding": "inplace",
        "label": "enum CuteDoggies.Breed",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_enum(Breed)1909)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => enum CuteDoggies.Breed)",
        "numberOfBytes": "32",
        "value": "t_enum(Breed)1909"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}